/*To test mutations, plasmid replication and growth at the same time. Three qplasmids are interconverted in a loop. The plasmids share all the replication components, so that they compete. Based on concentrations.

To test:
 - Modify the mutation rates to bias the equilibrium towards specific plasmdids
 - Modify the mutation coefficients (and the mutation_process qgate accordingly). If the balance is not 0, the plasmids may either dissapear or increase with no limit
 - Try different replication rates. Mutations displace the equilibrium copy number
 - Add multiple copies of the oriv and/or copy_control to one of the plasmids
 - Try adding eclipse period only to replication, mutation or both 
 - Change the initial copy number and the growth rate
 - Change the partition params
*/

include gro3

copyNum := 20.0;
iniCopies := 10.0;

repliRate := 1.0E+2;
mutRateAtoB := 10.0;
mutRateBtoC := 10.0;
mutRateCtoA := 10.0;

//bMutEclipse := false;
bMutEclipse := true;

//bRepliEclipse := false;
bRepliEclipse := true;

eclipseTime := { 4.0, 1.0 };

//volScale := "none";
volScale := "division";

global_params([ seed := 123443, show_plots := true ]);


//----------------------BIOCIRCUITS---------------------------
//---cells
cell_type([ name := "cell_A", strain := "_str_wt", qplasmids := {"qp_A"} , qplasmid_amounts := { iniCopies } ]);

//---plasmids
qplasmid([ name := "qp_A"
	, partition_system := "ps_ABC"
	, oriVs := {"ov_ABC"}
	, copy_controls := {"cc_ABC"}
	, eclipse := eclipseTime
	, eclipse_marker := "qpA_eclipse"
]);

qplasmid([ name := "qp_B"
	, partition_system := "ps_ABC"
	, oriVs := {"ov_ABC"}
	, copy_controls := {"cc_ABC"}
	, eclipse := eclipseTime
	, eclipse_marker := "qpB_eclipse"
]);

qplasmid([ name := "qp_C"
	, partition_system := "ps_ABC"
	, oriVs := {"ov_ABC"}
	, copy_controls := {"cc_ABC"}
	, eclipse := eclipseTime
	, eclipse_marker := "qpC_eclipse"
]);

function([ name := "fun_copyNumRawA", input := { "qp_A", "qpA_eclipse" } ]);
function([ name := "fun_copyNumRawB", input := { "qp_B", "qpB_eclipse" } ]);
function([ name := "fun_copyNumRawC", input := { "qp_C", "qpC_eclipse" } ]);


//---replication
copy_control([ name := "cc_ABC", gate := "_ga_true", w := 0.2 ]);

function([ name := "fun_copyNumRaw", input := {"ov_ABC", "ov_ABC_eclipse" } ]);
function([ name := "fun_copyNum", input := {"fun_copyNumRaw"}, auto_vol := volScale ]);
qgate([ name := "qga_copyNum", input := "fun_copyNum", value := copyNum, operator := "<" ]);

oriv([ name := "ov_ABC"
	, gate := "qga_copyNum"
	, copy_controls := {"cc_ABC"}
	, vmax := repliRate
	, w := 0.1
	, eclipse := bRepliEclipse
	, eclipse_marker := "ov_ABC_eclipse"
]);

partition_system([ name := "ps_ABC", gate := "_ga_true", fraction := 0.5, p := 0.5 ]);


//---mutations
mutation([ name := "mut_AtoB", plasmids := { "qp_A", "qp_B" } , amounts := { -1, 1 } ]);
function([ name := "fun_rateAtoB", input := { "qp_A" }, type := "sat_exp", params := { mutRateAtoB, 0.01 }, auto_vol := volScale ]);
mutation_process([ name := "mutp_AtoB", gate := "qp_A", rate_fun := "fun_rateAtoB", mutations := {"mut_AtoB"}, eclipse := bMutEclipse ]);

//---
mutation([ name := "mut_BtoC", plasmids := { "qp_B", "qp_C" } , amounts := { -1, 1 } ]); 
function([ name := "fun_rateBtoC", input := { "qp_B" }, type := "sat_exp", params := { mutRateBtoC, 0.01 }, auto_vol := volScale ]);
mutation_process([ name := "mutp_BtoC", gate := "qp_B", rate_fun := "fun_rateBtoC", mutations := {"mut_BtoC"}, eclipse := bMutEclipse ]);

//---
mutation([ name := "mut_CtoA", plasmids := { "qp_C", "qp_A" } , amounts := { -1, 1 } ]); 
function([ name := "fun_rateCtoA", input := { "qp_C" }, type := "sat_exp", params := { mutRateCtoA, 0.01 }, auto_vol := volScale ]);
mutation_process([ name := "mutp_CtoA", gate := "qp_C", rate_fun := "fun_rateCtoA", mutations := {"mut_CtoA"}, eclipse := bMutEclipse ]);


//------------ WORLD CONTROL -----------------------
//---placers
cell_placer([ name := "cp_A", cell_types := { "cell_A" }, amount := 100.0 ]);


//------------ VISUALS -----------------------
function([ name := "fun_qpAlog", input := {"fun_copyNumRawA"}, type := "log", params := {10.0}, auto_vol := volScale ]);
function([ name := "fun_qpBlog", input := {"fun_copyNumRawB"}, type := "log", params := {10.0}, auto_vol := volScale ]);
function([ name := "fun_qpClog", input := {"fun_copyNumRawC"}, type := "log", params := {10.0}, auto_vol := volScale ]);
cell_colour([ name := "ccol_red", gate := "fun_copyNumRawA", target := "fun_qpAlog", rgb := _red, scale := 0.5 ]);
cell_colour([ name := "ccol_green", gate := "fun_copyNumRawB", target := "fun_qpBlog", rgb := _green, scale := 0.5 ]);
cell_colour([ name := "ccol_blue", gate := "fun_copyNumRawC", target := "fun_qpClog", rgb := _blue, scale := 0.5 ]);

//---
plot([ name := "cplt_A", fields := { "qp_A", "qpA_eclipse", "fun_copyNumRawA" }, stats := {"avg"}, auto_vol := volScale ]);
plot([ name := "cplt_B", fields := { "qp_B", "qpB_eclipse", "fun_copyNumRawB" }, stats := {"avg"}, auto_vol := volScale ]);
plot([ name := "cplt_C", fields := { "qp_C", "qpC_eclipse", "fun_copyNumRawC" }, stats := {"avg"}, auto_vol := volScale ]);

//plot([ name := "cplt_rangeA", fields := { "fun_copyNumRawA" }, stats := { "avg", "min", "max" }, auto_vol := volScale ]);
//plot([ name := "cplt_rangeB", fields := { "fun_copyNumRawB" }, stats := { "avg", "min", "max" }, auto_vol := volScale ]);
//plot([ name := "cplt_rangeC", fields := { "fun_copyNumRawC" }, stats := { "avg", "min", "max" }, auto_vol := volScale ]);

//plot([ name := "cplt_active", fields := { "qp_A", "qp_B", "qp_C", "ov_ABC" } , stats := {"avg"}, auto_vol := volScale ]);
plot([ name := "cplt_all", fields := { "fun_copyNumRawA", "fun_copyNumRawB", "fun_copyNumRawC", "fun_copyNumRaw" } , stats := {"avg"}, auto_vol := volScale ]);